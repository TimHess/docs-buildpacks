---
title: NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> Buildpack
owner: Buildpacks
---

This topic describes how to push your NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> app to Cloud Foundry and how to configure your NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> app to use the NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> buildpack.

## <a id='pushing-apps'></a> Push an App

If your app contains an `nginx.conf` file, Cloud Foundry automatically uses the NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> buildpack when you run `cf push` to deploy your app.

If your Cloud Foundry deployment does not have the NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> buildpack installed or the installed version is outdated, run `cf push YOUR-APP -b https://github.com/cloudfoundry/nginx-buildpack.git` to deploy your app with the current buildpack, where `YOUR-APP` is the name of your app.

For example:

<pre class="terminal">
$ cf push<!--฿ If code, add code tags and sandwich between |the| and |command|. ฿--> my-app -b https://github.com/cloudfoundry/nginx-buildpack.git<!--฿ |Git| is the preferred casing. ฿-->
</pre>

## <a id='nginx'></a> Configure NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿-->

<%= vars.recommended_by %> recommends that you use the default NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> directory structure for your NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> web server. You can view this directory structure in the [nginx-buildpack](https://github.com/cloudfoundry/nginx-buildpack/tree/master/fixtures/mainline)<!--฿ Verify that the link name should not be a topic title or |THIRD-PARTY-NAME documentation|. ฿--> repository in GitHub.

Configure the NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> web server. You need these elements.

* A root directory for all static web content
* A MIME type configuration file
* An NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> configuration file
* A `buildpack.yml<!--฿ Per YAML.org, |.yaml| is the preferred extension. If the reader creates this YAML file, fix every instance of the filename in every topic as part of your commit. Files with the |.yml| extension downloaded from elsewhere are outside our control. ฿-->` YAML file that defines the version of NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> to use. For example, see [buildpack.yml<!--฿ Per YAML.org, |.yaml| is the preferred extension. If the reader creates this YAML file, fix every instance of the filename in every topic as part of your commit. Files with the |.yml| extension downloaded from elsewhere are outside our control. ฿-->](https://github.com/cloudfoundry/nginx-buildpack/blob/master/fixtures/mainline/buildpack.yml<!--฿ Per YAML.org, |.yaml| is the preferred extension. If the reader creates this YAML file, fix every instance of the filename in every topic as part of your commit. Files with the |.yml| extension downloaded from elsewhere are outside our control. ฿-->)<!--฿ Verify that the link name should not be a topic title or |THIRD-PARTY-NAME documentation|. ฿--> in the Cloud Foundry NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> Buildpack repository in GitHub.

Make any custom configuration changes based on these default files to verify compatibility with the buildpack.

## <a id='templating'></a> Create the nginx.conf File

Use the templating syntax when you create an `nginx.conf` file. This templating syntax loads modules and binds to ports based on values known at start time.

### <a id='port'></a> Port

Use `{{port}}` to set the port on which to listen. At start time, `{{port}}` will<!--฿ Avoid |will|: present tense is preferred. ฿--> interpolate in the value of `$PORT`.

<p class="note"><strong>Note</strong>: You must use <code>{{port}}</code> in your <code>nginx.conf</code> file.</p>

For example, to set an NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> server to listen on `$PORT`, include the following in your `nginx.conf` file:

```
server {
  listen {{port}};
}
```

### <a id='nameservers'></a> Name resolution

NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> does not resolve internal routes by default. To resolve internal routes, use `{{nameservers}}` to set the resolver IP address. At start time, `{{nameservers}}` interpolates the address of a platform-provided DNS service that includes information about internal routes.

Connections to internal routes do not go through the Cloud Foundry routing tier. As a result, you might see errors if you proxy an app on an internal route while it is restarting. There are some workarounds you might need<!--฿ Avoid anthropomorphizing: |require| might be better here. ฿--> to consider.

For more information, see [Using DNS for Service Discovery with NGINX and NGINX Plus](https://www.nginx.com/blog/dns-service-discovery-nginx-plus/) on the NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> blog.

### <a id='env'></a> Environment variables

To use an environment variable, include `{{env "YOUR-VARIABLE"}}`, where `YOUR-VARIABLE` is the name of an environment variable. At staging and at startup, the current value of the environment variable is retrieved.

For example, include the following in your `nginx.conf` file to activate or deactivate GZipping based on the value of `GZIP_DOWNLOADS`:

```
gzip {{env "GZIP_DOWNLOADS"}};
```<!--฿ Verify that no placeholders above require explanation in the style of |Where PLACEHOLDER is...| ฿-->

* If you set `GZIP_DOWNLOADS` to `off`, NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> does not GZip files.
* If you set `GZIP_DOWNLOADS` to `on`, NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> GZips files.

### <a id='unescaped-env'></a> Unescaped environment variables

To use unescaped environment variables, add an array of environment variable names to the `buildpack.yml<!--฿ Per YAML.org, |.yaml| is the preferred extension. If the reader creates this YAML file, fix every instance of the filename in every topic as part of your commit. Files with the |.yml| extension downloaded from elsewhere are outside our control. ฿-->`. See the following example:

```
---
nginx:
  version: stable
  plaintext_env_vars:
    - "OVERRIDE"
```

In this example, the `OVERRIDE` environment variable can contain `.json` content without being `html` escaped.
You must properly quote such variables to appear as strings in the ` nginx.conf` file.

### <a id='loading-modules'></a> Loading dynamic modules

NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> can dynamically load modules at runtime. These modules are shared-object files that can be<!--฿ Consider switching to active voice. ฿--> dynamically loaded using the `load_module` directive. In addition to loading modules dynamically, the NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> version provided by the buildpack has statically compiled the following modules into the NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> binary:

* `ngx_http_ssl_module`<!--฿ Use dashes for spacing in placeholders, not underscores. ฿-->
* `ngx_http_realip_module`<!--฿ Use dashes for spacing in placeholders, not underscores. ฿-->
* `ngx_http_gunzip_module`<!--฿ Use dashes for spacing in placeholders, not underscores. ฿-->
* `ngx_http_gzip_static_module`<!--฿ Use dashes for spacing in placeholders, not underscores. ฿-->
* `ngx_http_auth_request_module`<!--฿ Use dashes for spacing in placeholders, not underscores. ฿-->
* `ngx_http_random_index_module`<!--฿ Use dashes for spacing in placeholders, not underscores. ฿-->
* `ngx_http_secure_link_module`<!--฿ Use dashes for spacing in placeholders, not underscores. ฿-->
* `ngx_http_stub_status_module`<!--฿ Use dashes for spacing in placeholders, not underscores. ฿-->
* `ngx_http_sub_module`<!--฿ Use dashes for spacing in placeholders, not underscores. ฿-->

These statically compiled modules do not need to<!--฿ |must| is preferred or, better, rephrase as an imperative. ฿--> be loaded at runtime and are already available for use.

To load a dynamic NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> module, use the following syntax in the app `nginx.conf` file for your app:

```
{{module "MODULE-NAME"}}
```<!--฿ Verify that no placeholders above require explanation in the style of |Where PLACEHOLDER is...| ฿-->

If you have provided<!--฿ |you verbed| is punchier than |you have verbed| and it fits in most cases. ฿--> a module in a `modules` directory located at the root of your app, the buildpack instructs NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> to load that module.
If you have not provided a module, the buildpack instructs NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> to search for a matching built-in dynamic module.

As of v0.0.5 of the buildpack, the `ngx_stream_module` is available as a dynamic module that is built into the buildpack.

For example, to load a custom module named `ngx_hello_module`, provide a `modules/ngx_hello_module.so` file in your app directory and add the line below<!--฿ If referring to a page location, use |following| or |later| or, better, just use an anchor. If referring to product versions, use |earlier|. ฿--> to the top of your `nginx.conf` file:

```
{{module "ngx_hello_module"}}
```

To load a built-in module like `ngx_stream_module`, add the line below<!--฿ If referring to a page location, use |following| or |later| or, better, just use an anchor. If referring to product versions, use |earlier|. ฿--> to the top of your `nginx.conf` file. You do not need to<!--฿ |must| is preferred or, better, rephrase as an imperative. ฿--> provide an `ngx_stream_module.so` file:

```
{{module "ngx_stream_module"}}
```

<p class="note"><strong>Note</strong>: To name your modules directory something other than <code>modules</code>, use the NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> <code>load_module</code> directive, providing a path to the module relative to the location of your <code>nginx.conf</code> file. For example:
<code>load_module some_module_dir/my_module.so</code></p>

### <a id='enabling-debugging'></a> Enabling debugging

By default, debug logging will<!--฿ Avoid |will|: present tense is preferred. ฿--> be deactivated in the NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> buildpack. This helps optimize performance. Set the debug level with the `error_log` directive in the `nginx.conf` to enable debug logging.

To use the debug logging, add the `error_log` entry to your `nginx.conf` file, using the syntax below:

```
Syntax:  error_log file [level];
```

Where:

* `file` is the name of the file where the log is to be stored. The special value `stderr` selects the standard error<!--฿ |stderr| is preferred. ฿--> file. Logging to `syslog` can be<!--฿ Consider switching to active voice. ฿--> configured by<!--฿ Active voice is preferred. ฿--> specifying the “`syslog:`” prefix.
* `level` specifies the level of logging, and can be<!--฿ Consider switching to active voice. ฿--> one of the following:

  * `debug`
  * `info`
  * `notice`
  * `warn`
  * `error`
  * `crit`
  * `alert`
  * `emerg`

<p class="note"><strong>Note</strong>: The log levels above are listed in the order of increasing severity. Setting a certain log level will cause all messages of the specified and more severe log levels to be logged. For example, the default level <code>error</code> will cause error, crit, alert, and emerg messages to be logged. If this parameter is omitted, then <code>error</code> is used. </p>

Example:

```
error_log /path/to/log debug;
```

#### <a id='debugging-logs-selected-clients<!--฿ Shorten the anchor ID to 25 characters or fewer. Use dashes instead of spaces or periods. ฿-->'></a> Debugging logs for selected clients

To enable the debugging log for selected client addresses only, use the syntax below.

```
error_log /path/to/log;

events {
debug_connection 192.168.1.1;
debug_connection 192.168.10.0/24;
}
```

#### <a id='logging-to-a-cyclic-memory-buffer<!--฿ Shorten the anchor ID to 25 characters or fewer. Use dashes instead of spaces or periods. ฿-->'></a> Logging to a cyclic memory buffer

The debugging log can be written to a cyclic memory buffer. Use the syntax shown below.

```
error_log memory:32m debug;
```

Logging to the memory buffer on the debug level does not have significant impact on performance, even under high load. In this case, the log can be extracted using a gdb script like the one shown below.

```
set $log = ngx_cycle->log

while $log->writer != ngx_log_memory_writer
set $log = $log->next
end

set $buf = (ngx_log_memory_buf_t *) $log->wdata
dump binary memory debug_log.txt $buf->start $buf->end
```

## <a id='help'></a>Buildpack support

The resources listed in this section can assist you when using the NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> buildpack or when developing your own NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> buildpack.

* **NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> Buildpack Repository in GitHub**: Find more information about using and extending the NGINX<!--฿ |NGINX| for the brand. |nginx| for files and code. ฿--> buildpack in the [NGINX buildpack](https://github.com/cloudfoundry/nginx-buildpack) GitHub repository.

* **Release Notes**: Find current information about this buildpack on the [NGINX buildpack release page](https://github.com/cloudfoundry/nginx-buildpack/releases) in GitHub.

* **Slack**: Join the #buildpacks channel in the [Cloud Foundry Slack community](http://slack.cloudfoundry.org/).
